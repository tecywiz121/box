#ifndef BOX_ASYNC_CSL
#define BOX_ASYNC_CSL 1

#include <box/memory.csl>
#include <box/timer.csl>

/**
 * Add async message support to a timer group.
 * @param tgrp void A timer group created with BOX_TIMER.
 */
#define BOX_ASYNC(tgrp)                                                     \
integer _bxAsyncBegin##tgrp(integer type, float timeout, integer owner_only)\
{                                                                           \
    /* Restrict type to 0-2047 */                                           \
    type = (0x7FF & type) << 20;                                            \
                                                                            \
    key sender = NULL_KEY;                                                  \
    if (owner_only) {                                                       \
        type = type | 0x80000000;                                           \
        sender = llGetOwner();                                              \
    }                                                                       \
                                                                            \
    /* Start expiry timer */                                                \
    integer channel = bxTimerOnce(tgrp, type, timeout);                     \
                                                                            \
    /* Activate a listen on the channel */                                  \
    llListen(channel, "", sender, "");                                      \
    return channel;                                                         \
}                                                                           \
list _bxAsyncFinish##tgrp(integer channel, key sender)                      \
{                                                                           \
    integer id = bxTimerStopOnce(tgrp, channel);                            \
    if (0 == id) {                                                          \
        return [];                                                          \
    }                                                                       \
                                                                            \
    if ((id & 0x80000000) == 0) {                                           \
        sender = NULL_KEY;                                                  \
    } else if (sender != llGetOwner()) {                                    \
        return [];                                                          \
    }                                                                       \
                                                                            \
    id = 0x7FF & (id >> 20);                                                \
                                                                            \
    /* Get back original handle by calling llListen with same arguments */  \
    llListenRemove(llListen(channel, "", sender, ""));                      \
    return [channel, id];                                                   \
}                                                                           \
list _bxAsyncExpire##tgrp(integer id, integer handle)                       \
{                                                                           \
    if (!(id & 0xFFF00000) || (id & 0x000FFFFF)) {                          \
        return [];                                                          \
    }                                                                       \
    key sender = NULL_KEY;                                                  \
    if (id & 0x80000000) {                                                  \
        sender = llGetOwner();                                              \
    }                                                                       \
    /* Get back original handle by calling llListen with same arguments */  \
    llListenRemove(llListen(handle, "", sender, ""));                       \
    return [handle, 0x7FF & (id >> 20)];                                    \
}

/**
 * Begins a new async request.
 * @param tgrp void The tgrp of the timer group created with BOX_TIMER_GROUP.
 * @param type integer A number that uniquely identifies the 'type' of the
 *                     request. Will be returned when the event finishes or
 *                     expires. Must be in range 1-2047 inclusive.
 * @param timeout float How many seconds to wait before giving up on the request.
 * @param owner_only integer If TRUE, will only accept messages from llGetOwner.
 * @returns The channel number assigned to this request.
 */
#define bxAsyncBegin(tgrp, type, timeout, owner_only) _bxAsyncBegin##tgrp(type, timeout, owner_only)

/**
 * Check for a completed outstanding request on the given channel.
 * @param tgrp void The name of the timer group created with BOX_TIMER_GROUP.
 * @param channel integer The channel parameter from the listen event.
 * @param sender key The UUID of the message sender.
 * @returns An empty list if no requests completed, or [channel, type].
 */
#define bxAsyncFinish(tgrp, channel, sender) _bxAsyncFinish##tgrp(channel, sender)

/**
 * Check for any expired outstanding requests.
 * @param name void The name of the timer group created with BOX_TIMER_GROUP.
 * @param id integer The id as returned by bxTimerTick.
 * @param handle integer The handle as returned by bxTimerTick.
 * @returns A list of [channel, type] if there ar
 */
#define bxAsyncExpire(tgrp, id, handle) _bxAsyncExpire##tgrp(id, handle)

#endif /* BOX_ASYNC_CSL */
